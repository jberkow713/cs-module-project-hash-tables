# Use frequency analysis to find the key to ciphertext.txt, and then
# decode it.

# Your code here

def letter_count(s):

    d = {}

    for x in s:
        if x.isspace():
            continue
        

        if x not in d:
            d[x] = 0

        d[x] +=1
    return d     

f = letter_count("ID EWKKF WDQSMDU ID JCW JIEW XB XSU, OCWD QXXU PIDQ CWDKF JCW NWAXDU KGSWU JCW SMDU, JCWKW SIHWU OIJCID JCW QKWWD QSMUWN XB NCWKOXXU BXKWNJ, DWMK DXJJIDQCME JXOD, M BMEXGN XGJSMO OCXNW DMEW OMN KXYID CXXU. DX MKACWK WHWK SIHWU JCMJ AXGSU NZWWU M QKMF QXXNW NCMBJ OIJC NGAC NPISS MDU AGDDIDQ MN CIN, DXK OWKW JCWKW WHWK NGAC FWXEWD MN JCW NWHWDNAXKW EWKKF EWD JCMJ KXMEWU OIJC CIE JCKXGQC JCW QKWWDOXXU NCMUWN. KIQCJ EWKKISF JCWF UOWSSWU OIJCID JCW UWZJCN XB NCWKOXXU BXKWNJ, NGBBWKIDQ DWIJCWK AMKW DXK OMDJ, YGJ ZMNNIDQ JCW JIEW ID EWKKF QMEWN XB MKACWKF XK YXGJN XB AGUQWS ZSMF, SIHIDQ GZXD JCW PIDQ'N HWDINXD, OMNCWU UXOD OIJC UKMGQCJN XB MSW XB XAJXYWK YKWOIDQ.")

print(f)

def print_sorted_letter_count(s):
    d = letter_count(s)

    items = list(d.items())

    items.sort(key=lambda e: e[1], reverse=True)
    for i in items:
        print(i)

QR = print_sorted_letter_count("ID EWKKF WDQSMDU ID JCW JIEW XB XSU, OCWD QXXU PIDQ CWDKF JCW NWAXDU KGSWU JCW SMDU, JCWKW SIHWU OIJCID JCW QKWWD QSMUWN XB NCWKOXXU BXKWNJ, DWMK DXJJIDQCME JXOD, M BMEXGN XGJSMO OCXNW DMEW OMN KXYID CXXU. DX MKACWK WHWK SIHWU JCMJ AXGSU NZWWU M QKMF QXXNW NCMBJ OIJC NGAC NPISS MDU AGDDIDQ MN CIN, DXK OWKW JCWKW WHWK NGAC FWXEWD MN JCW NWHWDNAXKW EWKKF EWD JCMJ KXMEWU OIJC CIE JCKXGQC JCW QKWWDOXXU NCMUWN. KIQCJ EWKKISF JCWF UOWSSWU OIJCID JCW UWZJCN XB NCWKOXXU BXKWNJ, NGBBWKIDQ DWIJCWK AMKW DXK OMDJ, YGJ ZMNNIDQ JCW JIEW ID EWKKF QMEWN XB MKACWKF XK YXGJN XB AGUQWS ZSMF, SIHIDQ GZXD JCW PIDQ'N HWDINXD, OMNCWU UXOD OIJC UKMGQCJN XB MSW XB XAJXYWK YKWOIDQ.")
print(QR)




'E', 'T', 'A', 'O', 'H', 'N', 'R', 'I', 'S', 'D', 'L', 'W', 'U',
'G', 'F', 'B', 'M', 'Y', 'C', 'P', 'K', 'V', 'Q', 'J', 'X', 'Z'

encode_table = {
    'E': 'W',
    'A': 'X',
    'T': 'D',
    'W': 'C',
    'H': 'K',
    'N': 'J',
    'R': 'N',
    'I': 'I',
    'S': 'O',
    'D': 'U',
    'L': 'Q',
    'O': 'M',
    'U': 'S',
    'G': 'E',
    'F': 'G',
    'B': 'B',
    'M': 'A',
    'Y': 'F',
    'C': 'L',
    'P': 'H',
    'K': 'Y',
    'V': 'Z',
    'Q': 'P',
    'J': '0', 
    'X': 'V',
    'Z': 'R',
    ',': ',',
    "'": "'",
    '.': '.',
    ' ': ' ',


}

decode_Table = {value:key for (key,value) in encode_table.items()}

def decode(s):
    
    result = ""
    
    for c in s:
        
        result += decode_Table[c]

    return result





print(decode_Table)
print(decode("ID EWKKF WDQSMDU ID JCW JIEW XB XSU, OCWD QXXU PIDQ CWDKF JCW NWAXDU KGSWU JCW SMDU, JCWKW SIHWU OIJCID JCW QKWWD QSMUWN XB NCWKOXXU BXKWNJ, DWMK DXJJIDQCME JXOD, M BMEXGN XGJSMO OCXNW DMEW OMN KXYID CXXU. DX MKACWK WHWK SIHWU JCMJ AXGSU NZWWU M QKMF QXXNW NCMBJ OIJC NGAC NPISS MDU AGDDIDQ MN CIN, DXK OWKW JCWKW WHWK NGAC FWXEWD MN JCW NWHWDNAXKW EWKKF EWD JCMJ KXMEWU OIJC CIE JCKXGQC JCW QKWWDOXXU NCMUWN. KIQCJ EWKKISF JCWF UOWSSWU OIJCID JCW UWZJCN XB NCWKOXXU BXKWNJ, NGBBWKIDQ DWIJCWK AMKW DXK OMDJ, YGJ ZMNNIDQ JCW JIEW ID EWKKF QMEWN XB MKACWKF XK YXGJN XB AGUQWS ZSMF, SIHIDQ GZXD JCW PIDQ'N HWDINXD, OMNCWU UXOD OIJC UKMGQCJN XB MSW XB XAJXYWK YKWOIDQ."))


